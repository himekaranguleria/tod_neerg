<?php

/**
 * This is the model base class for the table "{{retailer}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Retailer".
 *
 * Columns in table "{{retailer}}" available as properties of the model,
 * followed by relations of table "{{retailer}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property string $data_dn
 * @property string $address
 * @property string $street
 * @property string $city
 * @property integer $zip_code
 * @property string $phone_no
 * @property string $fax_no
 * @property string $mobile_no
 * @property string $image_file
 * @property integer $m_type_1
 * @property integer $m_weight_1
 * @property integer $m_type_2
 * @property integer $m_weight_2
 * @property integer $m_type_3
 * @property integer $m_weight_3
 * @property integer $wholeseler_id
 * @property integer $state_id
 * @property integer $type_id
 * @property string $create_time
 * @property string $update_time
 * @property integer $create_user_id
 *
 * @property User $createUser
 * @property Wholesaler $wholeseler
 */
abstract class BaseRetailer extends GxActiveRecord {

    const TYPE_RESTAURANT = 1;
    const TYPE_RETAIL_TRADE = 2;

    public static function getStatusOptions($id = null) {
        $list = array("Draft", "Published", "Archive");
        if ($id == null)
            return $list;
        if (is_numeric($id))
            return $list [$id];
        return $id;
    }

    public static function getTypeOptions($id = null) {
        $list = array("TYPE1", "TYPE2", "TYPE3");
        if ($id == null)
            return $list;
        if (is_numeric($id))
            return $list [$id];
        return $id;
    }

    public function beforeValidate() {
        if ($this->isNewRecord) {
            if (!isset($this->create_time))
                $this->create_time = date('Y-m-d H:i:s');
            if (!isset($this->create_user_id))
                $this->create_user_id = Yii::app()->user->id;
        }else {
            
        }
        return parent::beforeValidate();
    }

    public static function model($className = __CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return '{{retailer}}';
    }

    public static function label($n = 1) {
        return Yii::t('app', 'EinzelhÃ¤ndler|EinzelhÃ¤ndler', $n);
    }

    public static function representingColumn() {
        return 'name';
    }

    public function rules() {
        return array(
            array('name, address, street, city, zip_code, state_id, type_id, create_time, create_user_id', 'required'),
            array('zip_code, m_type_1, m_weight_1, m_type_2, m_weight_2, m_type_3, m_weight_3, state_id, type_id, create_user_id', 'numerical', 'integerOnly' => true),
            array('name, data_dn, address, street, city,lat,long', 'length', 'max' => 256),
            array('phone_no, fax_no, mobile_no', 'length', 'max' => 11),
            array('lat,long', 'safe'),
            array('image_file', 'length', 'max' => 512),
            array('phone_no, fax_no, mobile_no, m_type_1, m_weight_1, m_type_2, m_weight_2, m_type_3, m_weight_3', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, name, data_dn, address, street, city, zip_code, phone_no, fax_no, mobile_no, image_file, m_type_1, m_weight_1, m_type_2, m_weight_2, m_type_3, m_weight_3, state_id, type_id, create_time, update_time, create_user_id', 'safe', 'on' => 'search'),
        );
    }

    public function relations() {
        return array(
            'createUser' => array(self::BELONGS_TO, 'User', 'create_user_id'),
//            'wholeseler' => array(self::BELONGS_TO, 'Wholesaler', 'wholeseler_id'),
        );
    }

    public function pivotModels() {
        return array(
        );
    }

    public function attributeLabels() {
        return array(
            'id' => Yii::t('app', 'ID'),
            'name' => Yii::t('app', 'Name'),
            'data_dn' => Yii::t('app', 'Data Dn'),
            'address' => Yii::t('app', 'Adresse'),
            'street' => Yii::t('app', 'Street'),
            'city' => Yii::t('app', 'City'),
            'zip_code' => Yii::t('app', 'Zip Code'),
            'phone_no' => Yii::t('app', 'Phone No'),
            'fax_no' => Yii::t('app', 'Fax No'),
            'mobile_no' => Yii::t('app', 'Mobile No'),
            'image_file' => Yii::t('app', 'Image File'),
            'm_type_1' => Yii::t('app', 'M Type 1'),
            'm_weight_1' => Yii::t('app', 'M Weight 1'),
            'm_type_2' => Yii::t('app', 'M Type 2'),
            'm_weight_2' => Yii::t('app', 'M Weight 2'),
            'm_type_3' => Yii::t('app', 'M Type 3'),
            'm_weight_3' => Yii::t('app', 'M Weight 3'),
//            'wholeseler_id' => null,
            'state_id' => Yii::t('app', 'Status'),
            'type_id' => Yii::t('app', 'Art'),
            'create_time' => Yii::t('app', 'Create Time'),
            'update_time' => Yii::t('app', 'Update Time'),
            'create_user_id' => null,
            'createUser' => null,
            'wholeseler' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('name', $this->name, true);
        $criteria->compare('data_dn', $this->data_dn, true);
        $criteria->compare('address', $this->address, true);
        $criteria->compare('street', $this->street, true);
        $criteria->compare('city', $this->city, true);
        $criteria->compare('zip_code', $this->zip_code);
        $criteria->compare('phone_no', $this->phone_no, true);
        $criteria->compare('fax_no', $this->fax_no, true);
        $criteria->compare('mobile_no', $this->mobile_no, true);
        $criteria->compare('image_file', $this->image_file, true);
        $criteria->compare('m_type_1', $this->m_type_1);
        $criteria->compare('m_weight_1', $this->m_weight_1);
        $criteria->compare('m_type_2', $this->m_type_2);
        $criteria->compare('m_weight_2', $this->m_weight_2);
        $criteria->compare('m_type_3', $this->m_type_3);
        $criteria->compare('m_weight_3', $this->m_weight_3);
//        $criteria->compare('wholeseler_id', $this->wholeseler_id);
        $criteria->compare('state_id', $this->state_id);
        $criteria->compare('type_id', $this->type_id);
        $criteria->compare('create_time', $this->create_time, true);
        $criteria->compare('update_time', $this->update_time, true);
        $criteria->compare('create_user_id', $this->create_user_id);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

}
